gerar_backend_task:
  description: >
    Crie toda a estrutura backend em Spring Boot com as seguintes camadas: domain, repository, service e controller.
    Use DDD e boas práticas RESTful. A aplicação deve ter endpoints para cadastrar usuários e reportar ocorrências.
  expected_output: >
    Projeto backend Java funcional com endpoints e estrutura limpa usando DDD.

modelar_banco_dados_task:
  description: >
    Modele e implemente ao menos 5 entidades (ex: Usuario, Cidade, Ocorrencia, Notificacao, EquipeCombate),
    com atributos reais, chaves primárias, estrangeiras e um arquivo `schema.sql` para o banco de dados MySQL.
  expected_output: >
    Script SQL e classes JPA completas com relacionamentos e chaves corretamente definidos.

criar_frontend_task:
  description: >
    Crie um frontend React com formulários de cadastro de usuário e de ocorrências, além de um mapa com as ocorrências usando Leaflet.
    O sistema deve usar Axios para se comunicar com o backend.
  expected_output: >
    Interface React funcional com formulários e mapa interativo.

integrar_twilio_task:
  description: >
    Implemente uma classe de serviço em Java que envie mensagens via WhatsApp usando a Twilio API.
    A mensagem deve ser enviada para o telefone do usuário com base em sua cidade e ocorrências recentes.
  expected_output: >
    Classe Java funcional que se comunica com a API do Twilio usando autenticação básica.

gerar_simulador_task:
  description: >
    Crie um simulador Python para gerenciar a resposta a incêndios com priorização por severidade.
    Use estruturas como heap, fila e implemente funções como "atender próxima ocorrência" e "registrar ação".
  expected_output: >
    Script Python funcional com simulação, organizado e documentado.

revisar_codigo_task:
  description: >
    Revise todo o código gerado, identifique problemas, sugira melhorias, corrija práticas ruins e
    certifique-se de que o projeto está coeso e limpo.
  expected_output: >
    Relatório ou código final revisado, corrigido e otimizado.
