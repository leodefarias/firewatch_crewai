#!/bin/bash

# Script de deployment do FireWatch
# Uso: ./deploy.sh [environment] [version]

set -e

ENVIRONMENT=${1:-development}
VERSION=${2:-latest}
PROJECT_ROOT=$(dirname $(dirname $(readlink -f $0)))
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

echo "üöÄ FireWatch Deployment Script"
echo "==============================="
echo "Environment: $ENVIRONMENT"
echo "Version: $VERSION"
echo "Project Root: $PROJECT_ROOT"
echo "Timestamp: $TIMESTAMP"
echo ""

# Fun√ß√£o para verificar pr√©-requisitos
check_prerequisites() {
    echo "üîç Verificando pr√©-requisitos..."
    
    # Verifica Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o est√° instalado"
        exit 1
    fi
    
    # Verifica Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n√£o est√° instalado"
        exit 1
    fi
    
    # Verifica se arquivo .env existe
    if [ ! -f "$PROJECT_ROOT/.env" ]; then
        echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado"
        echo "   Copiando .env.example para .env..."
        cp "$PROJECT_ROOT/.env.example" "$PROJECT_ROOT/.env"
        echo "   ‚úÖ Configure o arquivo .env com suas credenciais antes de continuar"
        echo "   üìù Edite o arquivo: $PROJECT_ROOT/.env"
        exit 1
    fi
    
    echo "‚úÖ Pr√©-requisitos verificados"
}

# Fun√ß√£o para fazer backup
backup_data() {
    echo "üíæ Fazendo backup dos dados..."
    
    BACKUP_DIR="$PROJECT_ROOT/backups/$TIMESTAMP"
    mkdir -p "$BACKUP_DIR"
    
    # Backup do banco de dados se estiver rodando
    if docker-compose ps firewatch-mysql | grep -q "Up"; then
        echo "   üìä Backup do MySQL..."
        docker-compose exec -T firewatch-mysql mysqldump -u firewatch_user -pfirewatch_pass firewatch > "$BACKUP_DIR/mysql_backup.sql"
    fi
    
    # Backup de logs
    if [ -d "$PROJECT_ROOT/logs" ]; then
        echo "   üìù Backup dos logs..."
        cp -r "$PROJECT_ROOT/logs" "$BACKUP_DIR/"
    fi
    
    echo "‚úÖ Backup salvo em: $BACKUP_DIR"
}

# Fun√ß√£o para deployment de desenvolvimento
deploy_development() {
    echo "üîß Deployment para DESENVOLVIMENTO..."
    
    cd "$PROJECT_ROOT"
    
    # Para servi√ßos existentes
    docker-compose down
    
    # Remove containers e volumes √≥rf√£os
    docker-compose down --remove-orphans -v
    
    # Rebuilda imagens
    docker-compose build --no-cache
    
    # Inicia servi√ßos
    docker-compose up -d
    
    echo "‚úÖ Deployment de desenvolvimento conclu√≠do"
    echo "üåê Frontend: http://localhost:3000"
    echo "üîó Backend: http://localhost:8080"
    echo "üóÑÔ∏è Adminer: http://localhost:8081"
}

# Fun√ß√£o para deployment de produ√ß√£o
deploy_production() {
    echo "üè≠ Deployment para PRODU√á√ÉO..."
    
    cd "$PROJECT_ROOT"
    
    # Faz backup antes do deploy
    backup_data
    
    # Para servi√ßos
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
    
    # Pull das imagens mais recentes
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
    
    # Rebuilda apenas se necess√°rio
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
    
    # Inicia servi√ßos em produ√ß√£o
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
    
    echo "‚úÖ Deployment de produ√ß√£o conclu√≠do"
    echo "üåê Aplica√ß√£o: http://localhost"
    echo "üìä Grafana: http://localhost:3001"
    echo "üìà Prometheus: http://localhost:9090"
}

# Fun√ß√£o para deployment de staging
deploy_staging() {
    echo "üß™ Deployment para STAGING..."
    
    cd "$PROJECT_ROOT"
    
    # Para servi√ßos
    docker-compose -f docker-compose.yml -f docker-compose.staging.yml down
    
    # Inicia servi√ßos de staging
    docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
    
    echo "‚úÖ Deployment de staging conclu√≠do"
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
check_health() {
    echo "üè• Verificando sa√∫de dos servi√ßos..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        echo "   Tentativa $attempt/$max_attempts..."
        
        # Verifica backend
        if curl -s http://localhost:8080/actuator/health > /dev/null; then
            echo "   ‚úÖ Backend est√° saud√°vel"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            echo "   ‚ùå Backend n√£o est√° respondendo ap√≥s $max_attempts tentativas"
            return 1
        fi
        
        sleep 10
        ((attempt++))
    done
    
    # Verifica frontend (se n√£o for produ√ß√£o com nginx)
    if [ "$ENVIRONMENT" = "development" ]; then
        if curl -s http://localhost:3000 > /dev/null; then
            echo "   ‚úÖ Frontend est√° saud√°vel"
        else
            echo "   ‚ö†Ô∏è  Frontend pode n√£o estar acess√≠vel ainda"
        fi
    fi
    
    # Verifica banco de dados
    if docker-compose exec -T firewatch-mysql mysql -u firewatch_user -pfirewatch_pass -e "SELECT 1" firewatch > /dev/null 2>&1; then
        echo "   ‚úÖ Banco de dados est√° saud√°vel"
    else
        echo "   ‚ö†Ô∏è  Banco de dados pode n√£o estar pronto ainda"
    fi
    
    echo "‚úÖ Verifica√ß√£o de sa√∫de conclu√≠da"
}

# Fun√ß√£o para executar testes p√≥s-deployment
run_tests() {
    echo "üß™ Executando testes p√≥s-deployment..."
    
    # Aguarda servi√ßos ficarem prontos
    sleep 30
    
    # Executa testes da API
    if [ -f "$PROJECT_ROOT/scripts/test_api.sh" ]; then
        echo "   üîó Testando API..."
        bash "$PROJECT_ROOT/scripts/test_api.sh" http://localhost:8080/api
    fi
    
    echo "‚úÖ Testes conclu√≠dos"
}

# Fun√ß√£o para mostrar logs
show_logs() {
    echo "üìã Logs dos servi√ßos:"
    docker-compose logs --tail=50 -f
}

# Fun√ß√£o para limpar recursos antigos
cleanup() {
    echo "üßπ Limpando recursos antigos..."
    
    # Remove imagens n√£o utilizadas
    docker image prune -f
    
    # Remove volumes √≥rf√£os
    docker volume prune -f
    
    # Remove containers parados
    docker container prune -f
    
    echo "‚úÖ Limpeza conclu√≠da"
}

# Fun√ß√£o para rollback
rollback() {
    echo "üîÑ Executando rollback..."
    
    if [ ! -d "$PROJECT_ROOT/backups" ]; then
        echo "‚ùå Nenhum backup encontrado para rollback"
        exit 1
    fi
    
    # Encontra backup mais recente
    LATEST_BACKUP=$(ls -1t "$PROJECT_ROOT/backups/" | head -n1)
    
    if [ -z "$LATEST_BACKUP" ]; then
        echo "‚ùå Nenhum backup v√°lido encontrado"
        exit 1
    fi
    
    echo "   üì¶ Usando backup: $LATEST_BACKUP"
    
    # Para servi√ßos
    docker-compose down
    
    # Restaura banco de dados
    if [ -f "$PROJECT_ROOT/backups/$LATEST_BACKUP/mysql_backup.sql" ]; then
        echo "   üóÑÔ∏è Restaurando banco de dados..."
        docker-compose up -d firewatch-mysql
        sleep 20
        docker-compose exec -T firewatch-mysql mysql -u firewatch_user -pfirewatch_pass firewatch < "$PROJECT_ROOT/backups/$LATEST_BACKUP/mysql_backup.sql"
    fi
    
    # Inicia servi√ßos
    docker-compose up -d
    
    echo "‚úÖ Rollback conclu√≠do"
}

# Fun√ß√£o para mostrar status
show_status() {
    echo "üìä Status dos servi√ßos:"
    docker-compose ps
    
    echo ""
    echo "üíæ Uso de recursos:"
    docker stats --no-stream
    
    echo ""
    echo "üåê URLs dispon√≠veis:"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend: http://localhost:8080"
    echo "   API Docs: http://localhost:8080/swagger-ui.html"
    echo "   H2 Console: http://localhost:8080/h2-console"
    echo "   Adminer: http://localhost:8081"
    echo "   Grafana: http://localhost:3001"
    echo "   Prometheus: http://localhost:9090"
}

# Menu principal
show_menu() {
    echo ""
    echo "üî• FireWatch Deployment Manager"
    echo "==============================="
    echo "1. Deploy Development"
    echo "2. Deploy Staging"
    echo "3. Deploy Production"
    echo "4. Check Health"
    echo "5. Run Tests"
    echo "6. Show Logs"
    echo "7. Show Status"
    echo "8. Cleanup"
    echo "9. Rollback"
    echo "10. Backup Data"
    echo "11. Exit"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
    
    case $choice in
        1) deploy_development ;;
        2) deploy_staging ;;
        3) deploy_production ;;
        4) check_health ;;
        5) run_tests ;;
        6) show_logs ;;
        7) show_status ;;
        8) cleanup ;;
        9) rollback ;;
        10) backup_data ;;
        11) echo "üëã At√© logo!"; exit 0 ;;
        *) echo "‚ùå Op√ß√£o inv√°lida" ;;
    esac
}

# Fun√ß√£o principal
main() {
    check_prerequisites
    
    # Se argumentos foram passados, executa diretamente
    if [ $# -gt 0 ]; then
        case $1 in
            development|dev) deploy_development ;;
            staging) deploy_staging ;;
            production|prod) deploy_production ;;
            health) check_health ;;
            test) run_tests ;;
            logs) show_logs ;;
            status) show_status ;;
            cleanup) cleanup ;;
            rollback) rollback ;;
            backup) backup_data ;;
            *) echo "‚ùå Ambiente inv√°lido: $1"; exit 1 ;;
        esac
        
        # Executa verifica√ß√£o de sa√∫de ap√≥s deploy
        if [[ "$1" =~ ^(development|staging|production|dev|prod)$ ]]; then
            echo ""
            check_health
            show_status
        fi
    else
        # Menu interativo
        while true; do
            show_menu
        done
    fi
}

# Executa fun√ß√£o principal
main "$@"