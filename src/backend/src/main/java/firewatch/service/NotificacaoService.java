package firewatch.service;

import firewatch.domain.Notificacao;
import firewatch.domain.Usuario;
import firewatch.domain.Ocorrencia;
import firewatch.repository.NotificacaoRepository;
import firewatch.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Servi√ßo respons√°vel por gerenciar notifica√ß√µes e alertas do sistema.
 * Gerencia o envio de alertas via WhatsApp para usu√°rios cadastrados na regi√£o das ocorr√™ncias.
 */
@Service
public class NotificacaoService {

  @Autowired
  private NotificacaoRepository notificacaoRepository;
  
  @Autowired
  private UsuarioRepository usuarioRepository;
  
  @Autowired
  private TwilioService twilioService;

  /**
   * Registra uma nova notifica√ß√£o no sistema.
   * 
   * @param usuario Usu√°rio destinat√°rio da notifica√ß√£o
   * @param mensagem Conte√∫do da mensagem
   * @param tipo Tipo da notifica√ß√£o (WHATSAPP_ALERTA, SMS_ALERTA, etc.)
   * @param ocorrencia Ocorr√™ncia relacionada √† notifica√ß√£o
   * @return Notifica√ß√£o registrada
   */
  public Notificacao registrarNotificacao(Usuario usuario, String mensagem, String tipo, Ocorrencia ocorrencia) {
    Notificacao notificacao = new Notificacao(mensagem, LocalDateTime.now(), tipo, usuario, ocorrencia);
    return notificacaoRepository.save(notificacao);
  }
  
  /**
   * Envia alertas via WhatsApp para todos os usu√°rios cadastrados na regi√£o da ocorr√™ncia.
   * A mensagem inclui detalhes da ocorr√™ncia, incluindo localiza√ß√£o e endere√ßo quando dispon√≠vel.
   * 
   * @param ocorrencia Ocorr√™ncia para a qual os alertas ser√£o enviados
   */
  public void enviarAlertas(Ocorrencia ocorrencia) {
    String localizacao = ocorrencia.getCidade().getNome();
    if (ocorrencia.getEndereco() != null && !ocorrencia.getEndereco().trim().isEmpty()) {
      localizacao += "\nEndere√ßo: " + ocorrencia.getEndereco();
    }
    
    String mensagem = String.format(
      "üî• ALERTA FIREWATCH üî•\n\n" +
      "Nova ocorr√™ncia detectada!\n" +
      "Localiza√ß√£o: %s\n" +
      "Severidade: %d/10\n" +
      "Descri√ß√£o: %s\n" +
      "Data/Hora: %s\n\n" +
      "Coordenadas: %.6f, %.6f",
      localizacao,
      ocorrencia.getSeveridade(),
      ocorrencia.getDescricao(),
      ocorrencia.getDataHora().toString(),
      ocorrencia.getLatitude(),
      ocorrencia.getLongitude()
    );
    
    List<Usuario> usuariosRegiao = usuarioRepository.findByCidadeId(ocorrencia.getCidade().getId());
    
    for (Usuario usuario : usuariosRegiao) {
      try {
        twilioService.enviarWhatsApp(usuario.getTelefone(), mensagem);
        registrarNotificacao(usuario, mensagem, "WHATSAPP_ALERTA", ocorrencia);
      } catch (Exception e) {
        System.err.println("Erro ao enviar notifica√ß√£o para " + usuario.getTelefone() + ": " + e.getMessage());
      }
    }
  }
  
  /**
   * Busca todas as notifica√ß√µes de um usu√°rio espec√≠fico.
   * 
   * @param usuarioId ID do usu√°rio
   * @return Lista de notifica√ß√µes do usu√°rio
   */
  public List<Notificacao> buscarPorUsuario(Long usuarioId) {
    return notificacaoRepository.findByUsuarioId(usuarioId);
  }
  
  /**
   * Busca todas as notifica√ß√µes relacionadas a uma ocorr√™ncia espec√≠fica.
   * 
   * @param ocorrenciaId ID da ocorr√™ncia
   * @return Lista de notifica√ß√µes da ocorr√™ncia
   */
  public List<Notificacao> buscarPorOcorrencia(Long ocorrenciaId) {
    return notificacaoRepository.findByOcorrenciaId(ocorrenciaId);
  }
  
  /**
   * Lista todas as notifica√ß√µes registradas no sistema.
   * 
   * @return Lista completa de notifica√ß√µes
   */
  public List<Notificacao> listarTodas() {
    return notificacaoRepository.findAll();
  }
}
